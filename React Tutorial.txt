React Tutorial
Q. What is React?
=> React js also know as react , is a popular javascript library for building user interfaces. it was devloped by facebook and open sourced in 2013, react is widely used for creating interactive and dynamic web applications.
- At its core, react follows componet-based architecture , where the interface is divided into reusable components. each component manages its own state and can be composed together to build complex uls. react utlizes a virtual DOM(Document object model) to efficently update and render the UI components.
- Some Key features and concepts of react include :
 1> Components : react allows devlopers to create reausable UI components, which encapsulate their own logic and state. these components can be composed together to build complex interfaces.
 2> JSx:JSX(javaScript xml) is an extension to javscript used in react. it enables developers to write HTML-like syntax within Javascript, making it easier to describe and render componets.
 3> Virtual DOM : React uses a virtual representation of the DOM, which is a lightweight copy of the actual HTML DOM. this virtual DOM allows react to efficently upadate and render only the necessary components when the application state changes.
 4> Unidirectional Data flow : React follows a unidirectional data flow also known as one-way binding.it means that data in react application flows in a single direction, from parent components child components. this helps to maintain a predictable state and makes it easire to debug and understand the application.
 5>React Hooks : introduced in react 16.8 hooks are functions that allow developers to use state and other react features in functional components instead of relying on class components. hooks provide a simpler and more concise way of managing state and lifecylce events.
  6> React Native : React has a sibling framework called react native, which is used for building native mobile application. it allows developers to write mobile apps using react components-based approach, and the code can be reused across different platfroms like IOS and Android.
--Note 
   React has a vast ecosystem of libraries and tools that complement its capabilities. it is often used in combination with other technologies such as redux for state management, react router for routing and axios for api request.
   Overall ract has gained popularity due to its simplicity, reusability, and perfromance optimiZATIONS, making its a go-to choise for many web developers when building modern user interfaces.
 Advantages :
  1> Code With MultiPle Purposes
  2> Faster rendering
  3> Stable Code Structure
  4> SEO Friendliness 
  5> Easy to Learn, Easy to Use.

Q. What is Node JS 
=> As an Asynchronous event-driven JAvascript runtime node js is designed to build scalable network application in the following "hello word" many connection can be handle concurrently. upon each connection the callback is fired but if there is no work to be done , node.js will sleep.

Q. What is Components.
=> A Component is one of the core building of react. in other words, we can say that every application you will developed in react will be made up of pieces called components. Components make the task of building uls much easier. you can see a UI broken down into multiple individual pieces called components and work on them independetnly and merge them all in a parent component which will be your final UI.
Type Of Components?
1> Functional Components
2> Class Components
3> Pure Components
4> Higher-Order Components
5> Controlled Components
6> Uncontroll Components
Q. What is Functional Components?
=> React js Functional Components are same of thr common components that will come across while working is react. these are simply javascript functions. we can create a fumctional components in react by writing a javascript  function. these function may or may not receive data as parameters. in the functional components, the return value is the jsx code to render to the Dom tree.
Q. Whar is Class Components?
=> React class based components are the  bread and butter of most modern web apps built in reactJS. these components are simple classes( made up of multiple functions that add functionality to the application). all class based components are child classes for the components class of react.
=> the main feature of class- based components that distinguished them from functional components is that they have to a state which dictates the current behavior and appearance of the components( Later. with react Hooks introduced in version 16.8, we are able to declare a stateful components without declaring a class). this state can be modified by calling the setState() function. one or more variables, arrays or object define as part of the state can be modified at a time with the setState() function.

Q. What is JSX?
=> As we have already seen that all of the react components have a render function. the render function specifies the Html output of a react components. JSX(JAvaScript Extension), is a react extension which allows writing javscript code  that looks like html. in other words. JSX is an html-like syntax used by react that extends ECMAScript so that HTML-like syntax can co-exit with javscript /react code. the syntax is used by preprocessors (i.e transpilers like babel) to transform HTML-like  syntax into standard javascript object engine will parse.
=> JSX provides you to write HTML/XML like structures(e.g DOM like Tree Structures) in the same file where you write javascript code, then preprocessor will transform these expressions into actual javaScript code. just like XML/HTML,JSX tags have a tag name attributes and children.

---*** Part 9> Click Event and Function --------
Q. What is event handlers in React?
=>Event handlers determine what action is to be taken whenever an event is fired. this could be a button click or a change in a text input.
=> Essentially , event handlers are what make it possible for users to interact with you react app. handling events with react elements is similar to handling event on DOM element with a few minor exceptions.
=> if you're familiar with how events work in standard HTML and javascript , it should be easy for you to learn how to handle event in react.

Q. What are onClick handlers in react?
=> The react onClick event handlers enables you to call a function and trigger an action when a uers clicks an element ,such as a button in your app. 
-> Event names are written in camelCase so the onClick evenet is written as onClick ina react app. in additon, react event handlers appear inside curly braces.
--Example  in HTML 
<button onclick="hello()"> hello </button>
--Example in React 
<button onClick={hello()}> hello </button>

----- Part 10> State Function in react ------
Q. state in React ?
=> the state is ab updatable structure that is used to contain data or information about the components. the state in a components can changes over time. the changes in state over time can happen as reponses to user action or system event. a components with the state is know as stateful components and how it will render. they are also responsible for making a components dynamic and interactive.
-> A state must be kept as simple as possible, it can be set by using the setState() method and calling setState() method triggers UI updates. A state represent the components local state or information.it can only be accessed or modified inside the components or by the component directly. to set an initial state before any interaction occurs we need to use the getInitialState() method.

------ part 11> State class components -----
------ part 12> props with functional/class components -----
Q> Props in React ?
=> Props stand for properties. they are read-only components. it is an object which stores the value of attributes of a tag and work similar to the HTML attributes. it gives a way to pass data from one components to other components . it is similar to function argument. props are passed to the components in the same way as argument passed in a function.
->props are immutable so we cannot modify the props from inside the components inside the component. we can add attributes called props. these attributes are available in the components as this.props and can be used to render method.
------ Part 14> #14: React Get Input Box Values ---------
Q.What is Get Input Box Value in React?
=> The OnChange Event Handle is a prop that you can pass into JSX<input> element. this prop is Provided by React so that your appliaction can listen to user input in real-time. when an onChange even occurs, the prop will call the function you passed as its parameter.
example:
 function handleChange(event){log(event.target.value);}
 <input onChange={handleChange}/>

------ Part 15>  #15: React Hide Show & Toggle  ---------
------ Part 16>  16: React Form Handling  ---------
Q> Form Handling in React?
=> forms play an essential role in modern web application. They enable users to share information, complete task and provide feedback.
-> without forms, many of the task that we take for granted on the web, such as logging in signing up, or making purchases, would not be possible.
-> handling forms in react involes capturing user input, managing form state, and performing action based on the form data, lets take a look at an example of form handling in react.

------ Part 17> #17: React Conditional Rendering ---------
Q> Conditional Rendering in react ?
=> conditional rendering react.js allows you to show or hide components based on certain constions. it is a powerful that helps you create dynamic and interactive user interfaces.

------ Part 18> #18: React Form Validation  ---------
Q> Form Validation in React 
=> Form Validation in react.js refers to the process of validating user input within a form to ensure that it meets certeria or constraints before it is submitted. it helps in preventing user from submitting incorrect or incomplete data provides a better user experience by giving feedback on the input error.

------ Part 19> #19: React Pass Function as Props  ---------

Q> What is Pass Function as props in React?
=> in react, you can pass function as props to child components. This allows you to communicate and share functionality between different part of your application.

------ Part 20> #20:  React Life Cycle Method  --------

Q> What is Life Cycle Method in react?
=>in Reacjs a life cycle method refers to a set of function that are invoked at various stages of a component life cycle. these method allow you to perfrom specific tasks or execute code at different points during the components existence.
-> in previous version of react there were serveral life cycle method available, but with the introduction of react 16.3 and later, some of these method have been deprecated in favor of a new set of methods based on the concept of "react Hooks." Hover, the older life cycle methods are still supported and can be used in existing codebases.

there are 3 phase 1.Mounting 2.Updating 3.Unmounting
1> Mounting Phase ---> 
      -> Constructor(): This method is called when a component is being initialized and constructed. it is
         typically used for initializing state and binding  event handlers.           
      -> Static getDerivedStateFromProps(): This method is invoked before rendering both on the initial mount
         and on subsequent updates. it allows you to update the state based on change in props.
      -> render(): this method is responsible for rendering the components JSX markup.
      -> componentDidMount(): This method is called immediately after the component has been mounted to the 
         DOM. it is commonly used to initiate API calls or set up event Listeners.
2> Updating Phase ---> 
      -> static getDerivedStateFormProps(): As mentioned eariler, this method is aslo called during the   
         updating phase when new peops are received.
      -> shouldComponentUpdate(): This method determines whether the component should re-render or not. it can
         be used to optimize perfromance by avoiding unnecessary re-renders.
      -> render(): the render method is called again to update the components UI.
      -> getSnapshotBeforeUpdate(): this method is called right changes are committed to the DOM. it allows you
         to capture information from the DOM before it is potentially changed.
      -> componentDidUpadate(): this method is invoked after the component has been re-rendered and the changes
         have been applied to the DOM. it is often used for side effect, such as updating the DOM based on prop
         or state changes.    
 3> Unmounting+ Phase ---> 
      -> componentWillUnmount(): This method is called right before the component is removed from the DOM. it
         can be used to perform cleanup task like removing event listeners or canceling API request.

Q> When it calls the lifecycle method in react:
   1> When Component is loaded.
   2> When component is Update with state and props.
   3> when component is removed.

Q> #21: React Constructor Lifecycle Methods?
 => in react the constructor method is part of the components life cycle and is invoked during the mounting phase. the constructor is a special method that gets called when an instance of a component is created.

---> Purpose 
     1> The constructor method is primarily used for initalizing the components state and binding event handles.
     2> it is aslo used to set up the initial values or state based on the components props 
     3> the constructor is called before the component is mounted to the DOM.

---> Syntax
        1> in a class-based component, the constructor method is defined within th component class.
        2> the constructor takes a props parameter, which is optional. it should be passed to the super() methos to call the constructor of the parent class(usually component).
        3> the state can be initialized within the constructor by assigning an object to this.state

Q> #22: React Render Lifecycle Methods ---
=> in react render is the technique that can redirect a page with the help of function render(). most imoprtantly, render a function we can use to define the HTML code whithin the html element. it helps to display certain view in the UI using certain logic define in the render function and returns the output.

---> Purpose ---
      1> React renders HTML to the web page by using a function called render().
      2> The purpose of the function is to display the specified HTML code inside the specified HTMl element.
      3> in the render() method we can read props and state and return our JSx code to the root component of
         our app.
      4> In the render() method, we cannot change the state, and we cannot cause side effects ( such as making an HTTP request to the webserver).

Q> #23: React ComponentDidMount Lifecycle Methods 
=> In React, the componentDidMount method is a life cycle method that is invoked immediately after a component has been mounted to the DOM. It is a good place to perform initializations, side effects, or interact with external APIs. 
---> Purpose:
Making API calls to fetch data from a server.
Setting up event listeners or subscriptions.
Manipulating the DOM or interacting with external libraries.
Performing additional initialization or setup tasks.

Q> #24: React ComponentDidUpdate Lifecycle Method 
=>In React, The componentDidUpdate() method allows us to execute the React code when the component is updated. All the network requests that are to be made when the props passed to the component changes are coded here.
---> Purpose:
Handle side effects and perform additional operations after a component update.
Respond to changes in props or state.
Update the DOM or interact with external libraries after a component update.
Perform asynchronous operations based on prop or state changes.
Optimize performance by avoiding unnecessary updates or expensive calculations.

Q> #25: React ShouldComponentUpdate Lifecycle Method 
=>In React, shouldComponentUpdate is a lifecycle method available in class components. Its purpose is to optimize rendering performance by allowing you to control when a component should update and re-render. 
-> by default, when a components state or props change, react re-render that component to reflect the change. However, re-rendering can be an expensive operation, especially for complex components or components trees. in some case, re-rendering may be unncessary if the ner state or props do not affect the component's output. this is where shouldComponentUpdate become valuable.
---> Purpose:
Your implementation of shouldComponentUpdate should return a boolean value.
If it returns true, the component will re-render as usual..
If it returns false, the component will not re-render, even if the props or state have changed.

Q> #26: React ComponentWillUnmount Lifecycle Method?
=> In React, componentWillUnmount was a lifecycle method used in class components. However, it is important to note that as of React 17.0.0, this method has been deprecated and is no longer recommended for use. React introduced the "unmounting" phase where components are removed from the DOM, and componentWillUnmount used to be a part of this phase.
-> The ComponentWillUnmount method was invoked righ before a component was removed from the DOM and destroyed. it provides an opporunity to perform any necessary cleanup task, such as cancelling timers, cleaning subscriptions or releasing resource to avoid memory leaks.

--> Purpose: 
It is called just before a component is removed from the DOM and destroyed.
Its primary purpose was to avoid memory leaks by cleaning up resources associated with the component.
With the introduction of React Hooks and the useEffect hook, cleanup tasks can be handled more easily and efficiently in functional components.

------ Part 27>  #27: React Hooks Lifecycle Method   --------
Q> What is Hooks?
=>In React, "hooks" are functions that allow you to use state and other React features in functional components, which were traditionally stateless. Hooks were introduced in React version 16.8 to provide a more elegant and reusable way to manage state and lifecycle behaviors in functional components.
-> Before Hooks react components were mainly created using class components, which allowd the use of lifecycle method and state/ However class components can become cumbersome and harder to maintain as the component logic grows. hooks provide an altrnative way to write components in a more concise and readable manner.

List of Hooks
1). Basic Hooks
useState
useEffect
useContext
2). Additional Hooks
useReducer
useCallback
useMemo
useRef
useImperativeHandle
useLayoutEffect
useDebugValue
useDeferredValue
useTransition
useId
3). Library Hooks
useSyncExternalStore
useInsertionEffect

--------#28: React useEffect Hook -------
Q> What is useEffect Hooks ?
=>In the context of React.js, useEffect is a built-in hook that allows you to perform side effects in functional components. Side effects typically involve tasks that should be executed after the component has rendered, such as fetching data from an API, subscribing to event listeners, or updating the document title. It is analogous to lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount in class components.
-> In React, the useEffect hook is used for handling side effects in functional components. It allows you to perform certain actions when the component mounts, updates, or unmounts. The useEffect hook takes two arguments: a function containing the side effect logic and an optional array of dependencies.

#29: React useEffect With Conditional

--------#30:  #30: React Style Methods -------
Q> Style for React components?
 React is a JavaScript library for building user interfaces. React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.
-->There are different ways to styling React JS Components :
Inline CSS
Normal CSS
CSS in JS
CSS module
Sass & SCSS - sass react pkg -> npm install sass
Styled Components (External Package)

 --------#31:  #31: Bootstrap Install In React ------ 
Q> What is Bootstrap ?
=>Bootstrap is a popular and widely-used open-source front-end framework for building responsive and mobile-first websites and web applications. It was originally developed by Twitter and was released in August 2011. The primary goal of Bootstrap is to simplify the web development process by providing a collection of pre-designed, reusable components and styles that can be easily customized and adapted to create modern and visually appealing user interfaces.

->Key features of Bootstrap include :
1>Responsive Layouts -> Bootstarp's grid system allows developers to create responsive layouts that automatically adjust and adapt to different screen sizes, making website look great on various devices like dekstops, tablets, and smartphones.
2>CSS Components -> Bootstrap comes with a wide range of css-based components such as button, forms navigation bars,dropdowns, modals, cards, and more, which can be easily integrated into web pages.
3>JavaScript Components -> Bootstarp includes javascript components like carsousels tooltips, popovers, modals and scrollspy, which enhance the user exprience and add interactive element to the website.
4>Customization ->  while Bootstrap offers a set of set default style and componets, it also allows devlopers to cutomize the framework the selecting specific components and modifying the them to match the desired design.
5>Browser Compatibility -> Bootstrap is designed to work well with most modern web browser,ensuring a consistent exprience for user across  different platfroms.
6>Community Support -> being open-source, Bootstrap has a large and active community of devlopers who contribute to the project, offers support, and create third-party extension, themes, and templates.

=> using Bootstrap can signficantly spped up the development process, especially for projects that required a responsive design. by leveraging the pre-built components and responsive layout system. developers can focus more on the application functionalitya and less on the intricate details of css and cross-browser compatibility. Bootstrap is often used in conjunction with popular front-end javascript libraries or frameworks like react.angular, or vue.js to build more sophisticated single-page application(spas) and dynamic user interfaces.

--------#33: #33: React Bootstrap Table ------
Q> What is Bootstrap Table?
=>Bootstrap 5 is the latest version of the popular front-end framework Bootstrap. It is an open-source toolkit used to build responsive, mobile-first web applications and websites. One of the fundamental components provided by Bootstrap is the Table.
->a Bootstrap 5 table is an enhanced version of the HTML table element that comes with predefined styles and interactive features. It allows you to display tabular data in a structured and visually appealing format. Bootstrap tables are designed to be responsive and work seamlessly across various devices, making them ideal for modern web development.
--------#32:  #32: React Array Map Method -------
Q> What is Array
=>An array is a fundamental data structure in computer programming that represents a collection of elements stored in a contiguous block of memory. These elements can be of the same or different data types, such as numbers, strings, objects, or even other arrays. Arrays are commonly used to organize and manipulate a group of related values.
->in most progrmming language, includes, javascript(used in react.js) arrays are zero-indexed, which means the first element is accessed with an index of 0, the second element with an index of 1, and so on.

Q>What is array with map?
=>Arrays offer various methods and properties to manipulate and work with the data they store, such as map(), filter(), reduce(), length, etc. These methods allow developers to perform operations on the array elements easily and efficiently.
-> using map() over a traditional for loop in react.js has serval advantages. the map() function provides a more concise and expressive way to perform tranformations on arrays and is often preferred for rendering lists of element. here are some reasons why using map() is common in reactjs.
1> Declarative approach : map() is higer-order function which means it follows a declarative programming paradigm. instead of explicitly defining the iteration steps, you only describe what you to achieve. this makes the code easier to read and understand.
2> immutable operation: react encouranges immutable data handling, and map() inherently creates a new array with the transformed element, leaving the original array unchanged. this is useful for avoiding side effect and marking the applications more predictable.
3> No need to manages index : when using map(), you don't have to manually manage the array index(as you would in a for loop) when rendering element in react . the key prop automatically takes care of uniquely identifying each rendered component in the list.
4> Cleaner Code : using map() can result in more consise and cleaner code. it reduces boilerplate and increases code readability.

--------#34:  #34: React Nested Map Function -------
Q>React Nested Map Function ?
=> In ReactJS, a nested map function refers to using the map function inside another map function. This approach is commonly used to handle data that has multiple levels of nesting, such as an array of arrays or an array of objects that contain arrays. When you encounter nested data structures in React, you can use nested map functions to iterate through the data at each level and render the corresponding UI components.

--------#35:  #35: React Reusable Components -------
Q> What is  Reusable Components ?
=> In ReactJS, "reusable components" refer to components that are designed and implemented in a way that allows them to be used multiple times throughout an application or across different projects. These components are modular and self-contained, meaning they encapsulate their functionality, appearance, and behavior in a single package. By creating reusable components, developers can efficiently build complex user interfaces while promoting code maintainability and reusability.

Benefits of Reusable Components in React,
1>Code Reusability
=> Reusable components can be used in different parts of an application or across multiple project, reducing redundant code and saving development time.
2>Consistency
=> when using the same component throughout an application, it ensure a consistent look and behaviour, enhancing the user exprience.
3>Modularity
=> reusable components are self-contained,which menas they can be easily moved,update or replaced without affecting other parts of the application. 
4>Maintainability
=> since components have a focused and isolated scope, they are easier to maintain,debug and rafactor.
5>Abstraction
=>Developers can abstract complex functionality into simple reusable components making the codebase more manageable and easier to understand.

--------#36: #36: React Fragment  ------- 
Q> What is Fragment
=> In React, a "fragment" is a feature that allows you to group multiple elements together without introducing an additional wrapping element in the DOM. Fragments are used to return multiple elements from a component's render method without adding unnecessary markup to the resulting HTML Before fragments were introduced in React, developers often had to wrap multiple elements in a single container element, even if that container element didn't serve any semantic purpose other than to group those elements together.

--------#37: #37: React Lifting State Up  -------
Q> What is Lifting State Up?
=>In React, "lifting state up" is a design pattern used to manage shared state among multiple components by moving the state from a lower-level component to a higher-level component in the component tree. This pattern is especially useful when two or more components need to share the same state or when a child component needs to update the state of its parent or another sibling component.

-> Here's how lifting state up works in React:
1>Identify the shared state :
2>Move the state up :
3>Pass the state down as props :
4>Modify the state through callbacks :














 
